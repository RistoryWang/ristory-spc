spring.application.name=ristory-spc-eureka
server.port=8810
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:8810/eureka




##打开security
#security.basic.enabled=true
#security.user.name=security
#security.user.password=security
#
##这里的用户名密码就是上面配置的
#eureka.client.service-url.defaultZone=http://security:security@localhost:8810/eureka
#




##eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
##默认30s
#eureka.server.responseCacheUpdateInvervalMs=3000
##eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。
##由于启用了evict其实就用不太上改这个配置了
##默认180s
#eureka.server.responseCacheAutoExpirationInSeconds=180
#
##启用主动失效，并且每次主动失效检测间隔为3s
##默认60s
#eureka.server.eviction-interval-timer-in-ms=3000
#
##服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
##注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
##默认90s
#eureka.instance.lease-expiration-duration-in-seconds=15
##服务刷新时间配置，每隔这个时间会主动心跳一次
##默认30s
#eureka.instance.lease-renewal-interval-in-seconds=5
##eureka client刷新本地缓存时间
##默认30s
#eureka.client.registryFetchIntervalSeconds=5
##eureka客户端ribbon刷新时间
##默认30s
#ribbon.ServerListRefreshInterval=1000
#eureka.instance.preferIpAddress=true
##关闭自我保护
#eureka.server.enable-self-preservation=false
#eureka.client.serviceUrl.defaultZone=http://10.120.242.153:8211/eureka/,http://10.120.242.154:8211/eureka/